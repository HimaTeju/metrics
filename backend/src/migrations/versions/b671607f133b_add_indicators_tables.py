"""Add indicators tables

Revision ID: b671607f133b
Revises:
Create Date: 2023-06-09 12:24:09.424182

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "b671607f133b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "indicator_dimension",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("value0", sa.String(), nullable=True),
        sa.Column("value1", sa.String(), nullable=True),
        sa.Column("value2", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_indicator_dimension")),
    )
    op.create_table(
        "indicator_period",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("month", sa.Integer(), nullable=False),
        sa.Column("day", sa.Integer(), nullable=False),
        sa.Column("weekday", sa.Integer(), nullable=False),
        sa.Column("hour", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_indicator_period")),
        sa.UniqueConstraint(
            "year", "month", "day", "hour", name=op.f("uq_indicator_period_year")
        ),
    )
    op.create_table(
        "indicator_record",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("indicator_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column("period_id", sa.Integer(), nullable=False),
        sa.Column("dimension_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dimension_id"],
            ["indicator_dimension.id"],
            name=op.f("fk_indicator_record_dimension_id_indicator_dimension"),
        ),
        sa.ForeignKeyConstraint(
            ["period_id"],
            ["indicator_period.id"],
            name=op.f("fk_indicator_record_period_id_indicator_period"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_indicator_record")),
        sa.UniqueConstraint(
            "indicator_id",
            "period_id",
            "dimension_id",
            name=op.f("uq_indicator_record_indicator_id"),
        ),
    )
    op.create_index(
        op.f("ix_indicator_record_indicator_id"),
        "indicator_record",
        ["indicator_id"],
        unique=False,
    )
    op.create_table(
        "indicator_state",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("indicator_id", sa.Integer(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.Column("period_id", sa.Integer(), nullable=False),
        sa.Column("dimension_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dimension_id"],
            ["indicator_dimension.id"],
            name=op.f("fk_indicator_state_dimension_id_indicator_dimension"),
        ),
        sa.ForeignKeyConstraint(
            ["period_id"],
            ["indicator_period.id"],
            name=op.f("fk_indicator_state_period_id_indicator_period"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_indicator_state")),
        sa.UniqueConstraint(
            "indicator_id",
            "period_id",
            "dimension_id",
            name=op.f("uq_indicator_state_indicator_id"),
        ),
    )
    op.create_index(
        op.f("ix_indicator_state_indicator_id"),
        "indicator_state",
        ["indicator_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_indicator_state_indicator_id"), table_name="indicator_state")
    op.drop_table("indicator_state")
    op.drop_index(
        op.f("ix_indicator_record_indicator_id"), table_name="indicator_record"
    )
    op.drop_table("indicator_record")
    op.drop_table("indicator_period")
    op.drop_table("indicator_dimension")
    # ### end Alembic commands ###
